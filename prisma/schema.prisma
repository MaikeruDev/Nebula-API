generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comments {
  ID          Int      @id @default(autoincrement())
  Text        String   @db.VarChar(255)
  UserID      Int
  PostID      Int
  DateCreated DateTime @db.Date
  posts       posts    @relation(fields: [PostID], references: [ID], onUpdate: Restrict, map: "comments_ibfk_1")
  users       users    @relation(fields: [UserID], references: [ID], onUpdate: Restrict, map: "comments_ibfk_2")

  @@index([PostID], map: "PostID")
  @@index([UserID], map: "UserID")
}

model likes {
  ID          Int      @id @default(autoincrement())
  UserID      Int
  PostID      Int
  DateCreated DateTime @default(now()) @db.DateTime(0)
  posts       posts    @relation(fields: [PostID], references: [ID], onUpdate: Restrict, map: "likes_ibfk_1")
  users       users    @relation(fields: [UserID], references: [ID], onUpdate: Restrict, map: "likes_ibfk_2")

  @@index([PostID], map: "PostID")
  @@index([UserID], map: "UserID")
}

model posts {
  ID            Int             @id @default(autoincrement())
  Text          String          @db.VarChar(255)
  Image         String          @db.MediumText
  AuthorID      Int
  DateCreated   DateTime        @default(now()) @db.DateTime(0)
  comments      comments[]
  likes         likes[]
  notifications notifications[]
  users         users           @relation(fields: [AuthorID], references: [ID], onUpdate: Restrict, map: "posts_ibfk_1")

  @@index([AuthorID], map: "AuthorID")
}

model relationships {
  ID                                    Int      @id @default(autoincrement())
  FollowerID                            Int
  FollowedID                            Int
  DateCreated                           DateTime @default(now()) @db.DateTime(0)
  users_relationships_FollowedIDTousers users    @relation("relationships_FollowedIDTousers", fields: [FollowedID], references: [ID], onUpdate: Restrict, map: "relationships_ibfk_1")
  users_relationships_FollowerIDTousers users    @relation("relationships_FollowerIDTousers", fields: [FollowerID], references: [ID], onUpdate: Restrict, map: "relationships_ibfk_2")

  @@index([FollowedID], map: "FollowedID")
  @@index([FollowerID], map: "FollowerID")
}

model users {
  ID                                            Int             @id @default(autoincrement())
  Username                                      String          @db.VarChar(50)
  Handle                                        String          @db.VarChar(50)
  Password                                      String          @db.VarChar(255)
  Email                                         String          @unique(map: "Email") @db.VarChar(255)
  ProfilePicture                                String          @db.VarChar(255)
  Banner                                        String          @db.VarChar(255)
  SignUpDate                                    DateTime        @default(now()) @db.DateTime(0)
  Bio                                           String?         @db.VarChar(100)
  comments                                      comments[]
  likes                                         likes[]
  notifications_notifications_SenderIDTousers   notifications[] @relation("notifications_SenderIDTousers")
  notifications_notifications_RecieverIDTousers notifications[] @relation("notifications_RecieverIDTousers")
  posts                                         posts[]
  relationships_relationships_FollowedIDTousers relationships[] @relation("relationships_FollowedIDTousers")
  relationships_relationships_FollowerIDTousers relationships[] @relation("relationships_FollowerIDTousers")
}

model notifications {
  ID                                    Int      @id @default(autoincrement())
  Type                                  String   @db.VarChar(255)
  SenderID                              Int
  RecieverID                            Int
  PostID                                Int?
  DateCreated                           DateTime @default(now()) @db.DateTime(0)
  users_notifications_SenderIDTousers   users    @relation("notifications_SenderIDTousers", fields: [SenderID], references: [ID], onUpdate: Restrict, map: "notifications_ibfk_1")
  users_notifications_RecieverIDTousers users    @relation("notifications_RecieverIDTousers", fields: [RecieverID], references: [ID], onUpdate: Restrict, map: "notifications_ibfk_2")
  posts                                 posts?   @relation(fields: [PostID], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "notifications_ibfk_3")

  @@index([PostID], map: "PostID")
  @@index([RecieverID], map: "RecieverID")
  @@index([SenderID], map: "SenderID")
}
